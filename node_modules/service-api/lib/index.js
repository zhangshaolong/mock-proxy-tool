import axios from"axios";axios.defaults.timeout=6e4,axios.defaults.headers["x-requested-with"]="XMLHttpRequest";const CancelToken=axios.CancelToken;let restfulReg=/\{([^\}]+)\}/g,ignoreMap={},showLoading=()=>{},hideLoading=()=>{},dealError=()=>{},checkStatus=resp=>{let code=resp.code;if(302===code);else if(403!==code)return 200===code||0===code},beforeSend=opts=>opts;const RequestManager=function(){const requests=[];return{add:promise=>{requests.push(promise)},remove:promise=>{for(let i=0;i<requests.length;i++)if(requests[i]===promise)return void requests.splice(i,1)},clear:()=>{for(;requests.length;)requests.pop().cancel()}}}();axios.interceptors.response.use(response=>response,error=>{if(axios.isCancel(error))throw error;return dealError(error)});const ajax=(path,params,options,type)=>{let cancel,context=options.context;context&&showLoading(context);let isSync=options.sync,headers=options.headers,timeout=options.timeout,responseType=options.responseType||"json";const promise=new Promise((resolve,reject)=>{let opts={url:path,method:type,cancelToken:new CancelToken(canl=>{cancel=canl})};headers&&(opts.headers=headers),timeout&&(opts.timeout=timeout),opts.responseType=responseType,"GET"===type?opts.params=params:(opts.data=params,opts.transformRequest=[(data,config)=>{if(data){let contextType=config["Content-Type"]||config.post["Content-Type"];if(contextType&&contextType.indexOf("application/x-www-form-urlencoded")<0)return JSON.stringify(data);let str="";for(let key in data)str+="&"+encodeURIComponent(key)+"="+encodeURIComponent(data[key]);if(str)return str.substr(1)}}]),opts=beforeSend(opts);const doAjax=(callback,ts)=>{const dealResponse=resp=>{context&&(hideLoading(context),delete options.context);let code=resp.code;302===code||403===code||(checkStatus(resp)?callback(!0,resp,ts):callback(!1,resp,ts))},dealException=e=>{context&&(hideLoading(context),delete options.context),axios.isCancel(e)||callback(!1,e,ts)};let url=opts.url,originalUrl=url,isRestful=!1;if(url=url.replace(restfulReg,(all,key)=>(isRestful=!0,params[key])),isRestful&&(params.__url__=originalUrl,opts.url=url),isSync){let xhr=new XMLHttpRequest;if("GET"===type){let args=[];for(let key in params)args.push(encodeURIComponent(key)+"="+encodeURIComponent(params[key]));args.length&&(url+="?"+args.join("&"))}timeout&&(xhr.timeout=timeout),xhr.open(type,url,!1);let headers=Object.assign({},axios.defaults.headers[type.toLowerCase()]);for(let key in headers)xhr.setRequestHeader(key,headers[key]);if(opts.headers)for(let key in opts.headers)xhr.setRequestHeader(key,opts.headers[key]);"POST"===type?xhr.send(opts.transformRequest[0](params,axios.defaults.headers)):xhr.send();try{dealResponse(JSON.parse(xhr.responseText))}catch(e){dealException(e)}RequestManager.remove(promise)}else axios(opts).then(res=>{dealResponse(res.data)}).catch(dealException).finally(()=>{RequestManager.remove(promise)})};if(options.ignoreBefore){path=path.split("?")[0];const checkResp=(success,resp,ts)=>{ignoreContext.ts===ts&&(ignoreContext=ignoreMap[path]=null,delete ignoreMap[path],success?resolve(resp):reject(resp))};let ts=(new Date).getTime(),ignoreDelay=options.ignoreDelay||50,ignoreContext=ignoreMap[path];ignoreContext?"todo"===ignoreContext.status?(clearTimeout(ignoreContext.timer),ignoreContext.timer=setTimeout(()=>{doAjax(checkResp,ts),ignoreContext.status="doing"},ignoreDelay)):"doing"===ignoreContext.status&&doAjax(checkResp,ts):(ignoreContext={status:"todo"}).timer=setTimeout(()=>{doAjax(checkResp,ts),ignoreContext.status="doing"},ignoreDelay),ignoreContext.ts=ts}else doAjax((success,resp)=>{success?resolve(resp):reject(resp)})});return promise.cancel=(msg=>{cancel(msg),RequestManager.remove(promise)}),RequestManager.add(promise),promise};export default{config:config=>{config.showLoading&&(showLoading=config.showLoading),config.hideLoading&&(hideLoading=config.hideLoading),config.dealError&&(dealError=config.dealError),config.checkStatus&&(checkStatus=config.checkStatus),config.globalContextType&&(axios.defaults.headers.post["Content-Type"]=config.globalContextType),config.beforeSend&&(beforeSend=config.beforeSend)},get:(path,params={},options={})=>ajax(path,params,options,"GET"),post:(path,params={},options={})=>ajax(path,params,options,"POST"),jsonp:(path,params={},options={})=>{let callbackKey=options.callbackKey||"callback";const script=document.createElement("script");document.body.appendChild(script);const funName="cb"+(new Date).getTime()+"_"+(""+Math.random()).substr(2,8);return new Promise((resolve,reject)=>{window[funName]=(resp=>{resolve(resp),document.body.removeChild(script),window[funName]=null,delete window[funName]}),script.onerror=(e=>{reject(e.message),document.body.removeChild(script),window[funName]=null,delete window[funName]}),path+=(path.indexOf("?")>-1?"&":"?")+`${callbackKey}=${funName}`;let querys="";for(let key in params)querys+=`&${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`;script.src=path+querys})},clear(){RequestManager.clear()}};